import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class Main {
    static int N,M;
    static int[][] maze;
    static boolean[][] visited;
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        maze = new int[N][M];
        visited = new boolean[N][M];
        for(int i =0 ; i< N ; i++){
            String n = String.valueOf(br.readLine());
            for(int j=0; j < M;j++){
                maze[i][j] = n.charAt(j)-'0';
                visited[i][j] = false;
            }
        }

    }

    static void dfs(int x, int y){
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {x,y});
        visited[x][y] = true;
        while (queue.isEmpty()){
            int current[] = queue.poll();
            int curX = current[0];
            int curY = current[1];


        }
    }
}
