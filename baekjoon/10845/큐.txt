import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
class Queue{
    int front,rear;
    int q[];
    Queue(int N){
        front = 0;
        rear = 0;
        q = new int[N];
    }
    void push(int X){
        q[rear++] = X;
    }
    int pop(){
        return (empty() == 1)  ? -1 : q[front++];
    }
    int size(){
        return rear-front;
    }
    int empty(){
        return (front == rear) ? 1 : 0;
    }
    int front(){
        return (empty() == 1) ? -1 : q[front];
    }
    int back(){
        return (empty() == 1) ? -1 : q[rear-1];
    }
}

public class Main {
    public static void main(String args[]) throws IOException {
        int i,j;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        StringBuilder sb = new StringBuilder();
        int N = Integer.parseInt(br.readLine());
        Queue q = new Queue(N);
        for (i = 0; i< N; i++){
            st = new StringTokenizer(br.readLine());
            switch (st.nextToken()){
                case "push":
                    int X = Integer.parseInt(st.nextToken());
                    q.push(X);
                    break;
                case "pop":
                    sb.append(q.pop()).append("\n");
                    break;
                case "size":
                    sb.append(q.size()).append("\n");
                    break;
                case "empty":
                    sb.append(q.empty()).append("\n");
                    break;
                case "front":
                    sb.append(q.front()).append("\n");
                    break;
                case "back":
                    sb.append(q.back()).append("\n");
                    break;
            }
        }
        System.out.print(sb);
    }
}
