import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {
    static int dx[] = {-1,0,1,0} ,dy[] = {0,-1,0,1};
    static int visited[][];
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st= new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int map[][] = new int[N][M];
        visited = new int[N][M];
        for(int i = 0; i < N ;i++){
            st= new StringTokenizer(br.readLine());
            for(int j = 0 ; j < M ;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        Stack<Point> s = new Stack<>();
        s.push(new Point(0,0));
        int count = 1;
        while(!s.empty()){
            Point cur = s.pop();
            if(map[cur.x][cur.y] == map[N-1][M-1]) {
                count++;
                continue;
            }
            for(int i = 3; i >=0; i--){
                int nx = cur.x+dx[i];
                int ny = cur.y+dy[i];
                if(nx >= N || ny >= M || nx < 0 || ny <0 || visited[nx][ny] == count ) continue;

                if(map[nx][ny] < map[cur.x][cur.y]){
                    visited[nx][ny]++;
                    s.push(new Point(nx,ny));

                }
            }
        }
        System.out.print(visited[N-1][M-1]);
    }
    static class Point{
        int x;
        int y;
        Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
}
