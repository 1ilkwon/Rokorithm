import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int maze[][];
    static boolean visited[][];
    static int dx[] = {-1,0,1,0},dy[] = {0,-1,0,1};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st= new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int result = 0;
        maze = new int[N][M];
        visited = new boolean[N][M];
        for(int i = 0; i < N;i++){
            String s = br.readLine();
            for(int j = 0;j < M; j++){
                maze[i][j] = s.charAt(j)-'0';
            }
        }
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0,0});
        while(!q.isEmpty()){
           int cur[] = q.poll();
           for(int i = 0; i <4; i++){
               int curX = cur[0]+dx[i];
               int curY = cur[1]+dy[i];
               if(curX < 0 || curX >= N || curY <0 || curY >= M) continue;
               if(visited[curX][curY]) continue;
               if(maze[curX][curY] != 0){
                   q.add(new int[]{curX,curY});
                   maze[curX][curY] = maze[curX][curY]+ maze[cur[0]][cur[1]];
                   visited[curX][curY]= true;
               }
           }
        }
        System.out.print(maze[N-1][M-1]);

    }
}
