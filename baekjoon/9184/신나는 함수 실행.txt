import java.io.*;
import java.util.StringTokenizer;

public class Main {
    static int dp[][][];
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringBuilder sb = new StringBuilder();
        int a, b ,c,res;
        w();
        while(true){
            StringTokenizer st = new StringTokenizer(br.readLine());

            a = Integer.parseInt(st.nextToken());
            b = Integer.parseInt(st.nextToken());
            c = Integer.parseInt(st.nextToken());
            if(a == -1 && b == -1 && c == -1) {
                break;
            }
            if(a<=0 || b<=0 || c<=0){
                res = 1;
                sb.append("w(").append(a).append(", ").append(b).append(", ").append(c).append(") = ").append(res).append("\n");
                continue;
            }
            if(a > 20 || b> 20 || c >20) {
                res = dp[20][20][20];
                sb.append("w(").append(a).append(", ").append(b).append(", ").append(c).append(") = ").append(res).append("\n");
                continue;
            }
            res = dp[a][b][c];
            sb.append("w(").append(a).append(", ").append(b).append(", ").append(c).append(") = ").append(res).append("\n");

        }
        bw.write(sb.toString());
        br.close();
        bw.close();

    }

    static void w(){
        dp = new int[21][21][21];
        for(int i = 0; i <= 20 ; i++){
            for (int j = 0 ; j <= 20; j++){
                for (int k = 0; k <= 20;k++){
                    if(i == 0 || j ==0 || k == 0){
                        dp[i][j][k] = 1;
                    }
                    else if(i < j && j < k){
                        dp[i][j][k] = dp[i][j][k-1] + dp[i][j-1][k-1] - dp[i][j-1][k];
                    }
                    else{
                        dp[i][j][k] = dp[i-1][j][k]+ dp[i-1][j-1][k] + dp[i-1][j][k-1]- dp[i-1][j-1][k-1];
                    }
                }
            }
        }
    }

}
